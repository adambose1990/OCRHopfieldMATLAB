function Initialization()
% Initialization of global variables and initial weights
clear all;
%% Global variabls 
global HopfieldNetwork Exemplars Thresh Iteration NumberPerTrainingSet;

NoOfNeuron = 64;
weightRange = [-5 5];
Thresh = 0;
Iteration = 20;
NumberPerTrainingSet = 64;

%% Hopfield network structure
HopfieldNetwork = [];
HopfieldNetwork.number = NoOfNeuron;
HopfieldNetwork.error = [];
HopfieldNetwork.Y = [];
HopfieldNetwork.neurons = [];
HopfieldNetwork.Z = [];
HopfieldNetwork.weights = [];

%% create a default layer
for i = 1: NoOfNeuron
    % create a default neuron
    offset = (weightRange(1) + weightRange(2))/2.0;
    range = abs(weightRange(2) - weightRange(1));
    weights = (rand(1, NoOfNeuron) - 0.5 )* range + offset;

    neuron.weights = weights;
    neuron.z = 0;
    neuron.y = 0;
    HopfieldNetwork.neurons = [HopfieldNetwork.neurons, neuron];
    HopfieldNetwork.weights = [HopfieldNetwork.weights; weights];
end

%% Exemplar definition
Exemplars = [];
Exemplars(1).input = [ -1, -1, -1,  1,  1, -1, -1, -1; ... % 'Letter A'
                       -1, -1,  1, -1, -1,  1, -1, -1; ...
                       -1,  1, -1, -1, -1, -1,  1, -1; ...
                        1, -1, -1, -1, -1, -1, -1,  1; ...
                        1,  1,  1,  1,  1,  1,  1,  1; ...
                        1, -1, -1, -1, -1, -1, -1,  1; ...
                        1, -1, -1, -1, -1, -1, -1,  1; ...
                        1, -1, -1, -1, -1, -1, -1,  1];
Exemplars(1).name = 'A';
Exemplars(2).input = [ -1, -1,  1,  1,  1,  1,  1,  1;  ... % 'Letter C'
                       -1,  1, -1, -1, -1, -1, -1, -1; ...
                        1, -1, -1, -1, -1, -1, -1, -1; ...
                        1, -1, -1, -1, -1, -1, -1, -1; ...
                        1, -1, -1, -1, -1, -1, -1, -1; ...
                        1, -1, -1, -1, -1, -1, -1, -1; ...
                       -1,  1, -1, -1, -1, -1, -1, -1; ...
                       -1, -1,  1,  1,  1,  1,  1,  1];
Exemplars(2).name = 'C';
Exemplars(3).input = [  1, -1, -1, -1, -1, -1, -1, 1;  ... % 'Letter N'
                        1,  1, -1, -1, -1, -1, -1, 1; ...
                        1, -1,  1, -1, -1, -1, -1, 1; ...
                        1, -1, -1,  1, -1, -1, -1, 1; ...
                        1, -1, -1, -1,  1, -1, -1, 1; ...
                        1, -1, -1, -1, -1,  1, -1, 1; ...
                        1, -1, -1, -1, -1, -1,  1, 1; ...
                        1, -1, -1, -1, -1, -1, -1, 1];
Exemplars(3).name = 'N';                  
Exemplars(4).input = [  1, -1, -1, -1, -1, -1, -1,  1;  ... % 'Letter X'
                       -1,  1, -1, -1, -1, -1,  1, -1; ...
                       -1, -1,  1, -1, -1,  1, -1, -1; ...
                       -1, -1, -1,  1,  1, -1, -1, -1; ...
                       -1, -1, -1,  1,  1, -1, -1, -1; ...
                       -1, -1,  1, -1, -1,  1, -1, -1; ...
                       -1,  1, -1, -1, -1, -1,  1, -1; ...
                        1, -1, -1, -1, -1, -1, -1,  1];
Exemplars(4).name = 'X';                  
Exemplars(5).input = [  1, -1, -1, -1, -1, -1, -1,  1;  ... % 'Letter Y'
                       -1,  1, -1, -1, -1, -1,  1, -1; ...
                       -1, -1,  1, -1, -1,  1, -1, -1; ...
                       -1, -1, -1,  1,  1, -1, -1, -1; ...
                       -1, -1, -1,  1,  1, -1, -1, -1; ...
                       -1, -1, -1,  1,  1, -1, -1, -1; ...
                       -1, -1, -1,  1,  1, -1, -1, -1; ...
                       -1, -1, -1,  1,  1, -1, -1, -1];
Exemplars(5).name = 'Y';                  
Exemplars(6).input = [  1,  1,  1,  1,  1,  1,  1,  1;  ... % 'Letter Z'
                       -1, -1, -1, -1, -1, -1,  1, -1; ...
                       -1, -1, -1, -1, -1,  1, -1, -1; ...
                       -1, -1, -1, -1,  1, -1, -1, -1; ...
                       -1, -1, -1,  1, -1, -1, -1, -1; ...
                       -1, -1,  1, -1, -1, -1, -1, -1; ...
                       -1,  1, -1, -1, -1, -1, -1, -1; ...
                        1,  1,  1,  1,  1,  1,  1,  1];
Exemplars(6).name = 'Z';                  
end